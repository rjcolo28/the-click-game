{"version":3,"sources":["components/TitleBar/index.js","components/Header/index.js","components/Wrapper/index.js","components/Pics/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Titlebar","props","react_default","a","createElement","className","href","id","score","totalScore","Header","src","alt","border","React","Component","Wrapper","children","Pics","name","source","clicked","onClick","handleClicks","Footer","App","state","images","event","imageArray","_this","console","log","clickedImage","target","clickState","getAttribute","setState","setAttribute","sort","Math","random","_this2","this","TitleBar","components_Header","components_Wrapper","map","image","components_Pics","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"03EAqBeA,MAlBf,SAAkBC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0DACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,mBACAJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BE,GAAG,aACzCL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,qCAEJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,sBAAcH,EAAMO,MAApB,iBAAyCP,EAAMQ,WAA/C,UCGTC,0LAXP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,+CAA8CJ,EAAAC,EAAAC,cAAA,OAAKO,IAAI,6EAA6EC,IAAI,wBAAwBC,OAAO,OAC/KX,EAAAC,EAAAC,cAAA,kDANKU,IAAMC,kBCMZC,MANf,SAAiBf,GACb,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaJ,EAAMgB,wBCO5BC,MATf,SAAcjB,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKX,EAAMkB,KAAMR,IAAKV,EAAMmB,OAAQb,GAAIN,EAAMM,GAAIc,QAASpB,EAAMoB,QAASC,QAASrB,EAAMsB,iBCQ3FC,0LATP,OACItB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACVH,EAAAC,EAAAC,cAAA,4FACAF,EAAAC,EAAAC,cAAA,yDALCU,IAAMC,YC8EZU,6MAvEbC,MAAS,CACPC,SACAnB,MAAO,EACPC,WAAY,KAIdc,aAAe,SAAAK,GAEb,IAAIC,EAAaC,EAAKJ,MAAMC,OAE5BI,QAAQC,IAAIH,GAGZ,IAAII,EAAeL,EAAMM,OAGrBC,EAAaF,EAAaG,aAAa,WAC3CL,QAAQC,IAAIG,GAGM,UAAfA,GAEDL,EAAKO,SAAS,CACZ7B,MAAOsB,EAAKJ,MAAMlB,MAAQ,EAC1BC,WAAYqB,EAAKJ,MAAMjB,WAAa,IAItCwB,EAAaK,aAAa,UAAW,QAGrCT,EAAWU,KAAM,kBAAMC,KAAKC,SAAW,OAKvCX,EAAKO,SAAS,CAAE7B,MAAO,IAEvByB,EAAaK,aAAa,UAAW,SAErCT,EAAWU,KAAM,kBAAMC,KAAKC,SAAW,+EAIlC,IAAAC,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CACEpC,MAAQmC,KAAKjB,MAAMlB,MACnBC,WAAakC,KAAKjB,MAAMjB,aAE1BP,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAC0C,EAAD,KACGH,KAAKjB,MAAMC,OAAOoB,IAAI,SAAAC,GAAK,OAC1B9C,EAAAC,EAAAC,cAAC6C,EAAD,CACE1C,GAAKyC,EAAMzC,GACX2C,IAAMF,EAAMzC,GACZY,KAAO6B,EAAM7B,KACbC,OAAS4B,EAAM5B,OACfC,QAAU2B,EAAM3B,QAChBE,aAAemB,EAAKnB,kBAI1BrB,EAAAC,EAAAC,cAAC+C,EAAD,cAlEUpC,aCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6220dfd6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nfunction Titlebar(props) {\n    return (\n        <nav className=\"navbar sticky-top navbar-expand-lg navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"/\">The Clicky Game</a>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                        <span>Welcome, Challenger!</span>\n                    </li>\n                    <li className=\"nav-item\">\n                        <span>Score: {props.score} | Top Score: {props.totalScore} </span>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default Titlebar;","import React from \"react\";\nimport \"./styles.css\";\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                <a href=\"https://fontmeme.com/super-smash-bros-font/\"><img src=\"https://fontmeme.com/permalink/190923/041beb59c52d75b13d9daf33a2b89d58.png\" alt=\"super-smash-bros-font\" border=\"0\"></img></a>\n                <h2>Click on an image to begin!</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nimport \"./styles.css\";\n\nfunction Wrapper(props) {\n    return (\n        <main className=\"container\">{props.children}</main>\n    )\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./styles.css\";\n\nfunction Pics(props) {\n    return (\n        <div className=\"clickable-image\">\n            <img alt={props.name} src={props.source} id={props.id} clicked={props.clicked} onClick={props.handleClicks}></img>\n        </div>\n    )\n    \n}\n\nexport default Pics;","import React from \"react\";\nimport \"./styles.css\";\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                    <p>Title font provided by Font Meme at https://fontmeme.com/super-smash-bros-font/</p>\n                    <p>All images provided by Nintendo Life</p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Titlebar from \"./components/TitleBar\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport images from \"./assets/images.json\";\nimport Pics from \"./components/Pics\";\nimport Footer from \"./components/Footer\";\n\n\nclass App extends Component {\n  state =  {\n    images,\n    score: 0,\n    totalScore: 0\n  };\n  \n  // game mechanics\n  handleClicks = event => {\n    // assign the array of image objects to a variable\n    let imageArray = this.state.images;\n\n    console.log(imageArray);\n    \n    // assign the click's target to a variable\n    let clickedImage = event.target;\n\n    // set the \"clicked\" attribute of the clicked pic to a variable and log it in console of testing\n    let clickState = clickedImage.getAttribute(\"clicked\");\n    console.log(clickState);\n\n    // attribute check\n    if(clickState === \"false\") {\n      // add one point to both game score and total score\n      this.setState({\n        score: this.state.score + 1,\n        totalScore: this.state.totalScore + 1\n      })\n\n      // set attribute of clicked image to \"true\"\n      clickedImage.setAttribute(\"clicked\", \"true\");\n\n      // randomize order of images\n      imageArray.sort( () => Math.random() - 0.5 );\n\n      // if \"clicked\" attribute is true\n    } else {\n      // reset game score to 0\n      this.setState({ score: 0 })\n      // reset \"clicked\" attribute to true\n      clickedImage.setAttribute(\"clicked\", \"false\");\n      // randomize images again\n      imageArray.sort( () => Math.random() - 0.5 );\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Titlebar \n          score= {this.state.score}\n          totalScore= {this.state.totalScore}\n        />\n        <Header />\n        <Wrapper>\n          {this.state.images.map(image => (\n            <Pics\n              id= {image.id}\n              key= {image.id}\n              name= {image.name}\n              source= {image.source}\n              clicked= {image.clicked}\n              handleClicks= {this.handleClicks}\n            />\n            ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}